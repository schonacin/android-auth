package com.blue_unicorn.android_auth_lib.ctap2.transport_specific_bindings.ble.framing;

import com.blue_unicorn.android_auth_lib.ctap2.transport_specific_bindings.ble.exceptions.BleException;
import com.blue_unicorn.android_auth_lib.ctap2.transport_specific_bindings.ble.exceptions.OtherException;
import com.blue_unicorn.android_auth_lib.ctap2.transport_specific_bindings.ble.framing.data.BaseContinuationFragment;
import com.blue_unicorn.android_auth_lib.ctap2.transport_specific_bindings.ble.framing.data.BaseFrame;
import com.blue_unicorn.android_auth_lib.ctap2.transport_specific_bindings.ble.framing.data.BaseInitializationFragment;
import com.blue_unicorn.android_auth_lib.ctap2.transport_specific_bindings.ble.framing.data.Fragment;
import com.blue_unicorn.android_auth_lib.ctap2.transport_specific_bindings.ble.framing.data.Frame;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.robolectric.RobolectricTestRunner;

import java.util.ArrayList;
import java.util.List;

import io.reactivex.rxjava3.core.Flowable;
import io.reactivex.rxjava3.core.Single;

@RunWith(RobolectricTestRunner.class)
public class BaseFragmentationProviderTest {

    private BaseFragmentationProvider fragmentationProvider;

    @Before
    public void setUp() {
        fragmentationProvider = new BaseFragmentationProvider();
    }

    @Test
    public void transformsFrameToSingleFragmentWithoutErrors() throws BleException {
        int TEST_FRAME_TO_SINGLE_FRAGMENT_MAXLEN = 1024;
        Frame TEST_FRAME_TO_SINGLE_FRAGMENT_FRAME = new BaseFrame((byte) 0x81, (byte) 0x00, (byte) 0x6a, new byte[]{(byte) 0x02, (byte) 0xa3, (byte) 0x01, (byte) 0x6b, (byte) 0x77, (byte) 0x65, (byte) 0x62, (byte) 0x61, (byte) 0x75, (byte) 0x74, (byte) 0x68, (byte) 0x6e, (byte) 0x2e, (byte) 0x69, (byte) 0x6f, (byte) 0x02, (byte) 0x58, (byte) 0x20, (byte) 0x28, (byte) 0x7a, (byte) 0x01, (byte) 0x7f, (byte) 0x92, (byte) 0x90, (byte) 0x15, (byte) 0x6f, (byte) 0x65, (byte) 0x61, (byte) 0x8f, (byte) 0x13, (byte) 0x42, (byte) 0xeb, (byte) 0x96, (byte) 0x53, (byte) 0x2e, (byte) 0x57, (byte) 0x6a, (byte) 0x78, (byte) 0x86, (byte) 0x0a, (byte) 0x25, (byte) 0xcc, (byte) 0x3b, (byte) 0x09, (byte) 0xcb, (byte) 0xb0, (byte) 0x95, (byte) 0x93, (byte) 0xf7, (byte) 0xb9, (byte) 0x03, (byte) 0x81, (byte) 0xa2, (byte) 0x62, (byte) 0x69, (byte) 0x64, (byte) 0x58, (byte) 0x20, (byte) 0x7c, (byte) 0xe0, (byte) 0xbe, (byte) 0xf2, (byte) 0x27, (byte) 0x8e, (byte) 0x10, (byte) 0xc4, (byte) 0x74, (byte) 0x75, (byte) 0xfd, (byte) 0xde, (byte) 0x1b, (byte) 0x4d, (byte) 0xc7, (byte) 0x20, (byte) 0x4d, (byte) 0xf9, (byte) 0x73, (byte) 0xd5, (byte) 0xa8, (byte) 0xa8, (byte) 0xae, (byte) 0xd1, (byte) 0x4f, (byte) 0x32, (byte) 0x27, (byte) 0x44, (byte) 0x24, (byte) 0xa8, (byte) 0xe5, (byte) 0x42, (byte) 0x64, (byte) 0x74, (byte) 0x79, (byte) 0x70, (byte) 0x65, (byte) 0x6a, (byte) 0x70, (byte) 0x75, (byte) 0x62, (byte) 0x6c, (byte) 0x69, (byte) 0x63, (byte) 0x2d, (byte) 0x6b, (byte) 0x65, (byte) 0x79});
        fragmentationProvider.fragment(Single.just(TEST_FRAME_TO_SINGLE_FRAGMENT_FRAME), TEST_FRAME_TO_SINGLE_FRAGMENT_MAXLEN).test().assertNoErrors();
    }

    @Test
    public void transformsFrameToSingleFragmentWithCorrectResult() throws BleException {
        int TEST_FRAME_TO_SINGLE_FRAGMENT_MAXLEN = 1024;
        Frame TEST_FRAME_TO_SINGLE_FRAGMENT_FRAME = new BaseFrame((byte) 0x81, (byte) 0x00, (byte) 0x6a, new byte[]{(byte) 0x02, (byte) 0xa3, (byte) 0x01, (byte) 0x6b, (byte) 0x77, (byte) 0x65, (byte) 0x62, (byte) 0x61, (byte) 0x75, (byte) 0x74, (byte) 0x68, (byte) 0x6e, (byte) 0x2e, (byte) 0x69, (byte) 0x6f, (byte) 0x02, (byte) 0x58, (byte) 0x20, (byte) 0x28, (byte) 0x7a, (byte) 0x01, (byte) 0x7f, (byte) 0x92, (byte) 0x90, (byte) 0x15, (byte) 0x6f, (byte) 0x65, (byte) 0x61, (byte) 0x8f, (byte) 0x13, (byte) 0x42, (byte) 0xeb, (byte) 0x96, (byte) 0x53, (byte) 0x2e, (byte) 0x57, (byte) 0x6a, (byte) 0x78, (byte) 0x86, (byte) 0x0a, (byte) 0x25, (byte) 0xcc, (byte) 0x3b, (byte) 0x09, (byte) 0xcb, (byte) 0xb0, (byte) 0x95, (byte) 0x93, (byte) 0xf7, (byte) 0xb9, (byte) 0x03, (byte) 0x81, (byte) 0xa2, (byte) 0x62, (byte) 0x69, (byte) 0x64, (byte) 0x58, (byte) 0x20, (byte) 0x7c, (byte) 0xe0, (byte) 0xbe, (byte) 0xf2, (byte) 0x27, (byte) 0x8e, (byte) 0x10, (byte) 0xc4, (byte) 0x74, (byte) 0x75, (byte) 0xfd, (byte) 0xde, (byte) 0x1b, (byte) 0x4d, (byte) 0xc7, (byte) 0x20, (byte) 0x4d, (byte) 0xf9, (byte) 0x73, (byte) 0xd5, (byte) 0xa8, (byte) 0xa8, (byte) 0xae, (byte) 0xd1, (byte) 0x4f, (byte) 0x32, (byte) 0x27, (byte) 0x44, (byte) 0x24, (byte) 0xa8, (byte) 0xe5, (byte) 0x42, (byte) 0x64, (byte) 0x74, (byte) 0x79, (byte) 0x70, (byte) 0x65, (byte) 0x6a, (byte) 0x70, (byte) 0x75, (byte) 0x62, (byte) 0x6c, (byte) 0x69, (byte) 0x63, (byte) 0x2d, (byte) 0x6b, (byte) 0x65, (byte) 0x79});

        Fragment TEST_FRAME_TO_SINGLE_FRAGMENT_RESULT_INIT_FRAG = new BaseInitializationFragment(TEST_FRAME_TO_SINGLE_FRAGMENT_FRAME.getCMDSTAT(), TEST_FRAME_TO_SINGLE_FRAGMENT_FRAME.getHLEN(), TEST_FRAME_TO_SINGLE_FRAGMENT_FRAME.getLLEN(), TEST_FRAME_TO_SINGLE_FRAGMENT_FRAME.getDATA());
        fragmentationProvider.fragment(Single.just(TEST_FRAME_TO_SINGLE_FRAGMENT_FRAME), TEST_FRAME_TO_SINGLE_FRAGMENT_MAXLEN).test().assertValue(TEST_FRAME_TO_SINGLE_FRAGMENT_RESULT_INIT_FRAG);
    }

    @Test
    public void transformsFrameToMultipleFragmentsWithoutWraparoundWithoutErrors() throws BleException {
        int TEST_FRAME_TO_MULTIPLE_FRAGMENTS_MAXLEN = 32;
        Frame TEST_FRAME_TO_MULTIPLE_FRAGMENTS_FRAME = new BaseFrame((byte) 0x81, (byte) 0x00, (byte) 0x6a, new byte[]{(byte) 0x02, (byte) 0xa3, (byte) 0x01, (byte) 0x6b, (byte) 0x77, (byte) 0x65, (byte) 0x62, (byte) 0x61, (byte) 0x75, (byte) 0x74, (byte) 0x68, (byte) 0x6e, (byte) 0x2e, (byte) 0x69, (byte) 0x6f, (byte) 0x02, (byte) 0x58, (byte) 0x20, (byte) 0x28, (byte) 0x7a, (byte) 0x01, (byte) 0x7f, (byte) 0x92, (byte) 0x90, (byte) 0x15, (byte) 0x6f, (byte) 0x65, (byte) 0x61, (byte) 0x8f, (byte) 0x13, (byte) 0x42, (byte) 0xeb, (byte) 0x96, (byte) 0x53, (byte) 0x2e, (byte) 0x57, (byte) 0x6a, (byte) 0x78, (byte) 0x86, (byte) 0x0a, (byte) 0x25, (byte) 0xcc, (byte) 0x3b, (byte) 0x09, (byte) 0xcb, (byte) 0xb0, (byte) 0x95, (byte) 0x93, (byte) 0xf7, (byte) 0xb9, (byte) 0x03, (byte) 0x81, (byte) 0xa2, (byte) 0x62, (byte) 0x69, (byte) 0x64, (byte) 0x58, (byte) 0x20, (byte) 0x7c, (byte) 0xe0, (byte) 0xbe, (byte) 0xf2, (byte) 0x27, (byte) 0x8e, (byte) 0x10, (byte) 0xc4, (byte) 0x74, (byte) 0x75, (byte) 0xfd, (byte) 0xde, (byte) 0x1b, (byte) 0x4d, (byte) 0xc7, (byte) 0x20, (byte) 0x4d, (byte) 0xf9, (byte) 0x73, (byte) 0xd5, (byte) 0xa8, (byte) 0xa8, (byte) 0xae, (byte) 0xd1, (byte) 0x4f, (byte) 0x32, (byte) 0x27, (byte) 0x44, (byte) 0x24, (byte) 0xa8, (byte) 0xe5, (byte) 0x42, (byte) 0x64, (byte) 0x74, (byte) 0x79, (byte) 0x70, (byte) 0x65, (byte) 0x6a, (byte) 0x70, (byte) 0x75, (byte) 0x62, (byte) 0x6c, (byte) 0x69, (byte) 0x63, (byte) 0x2d, (byte) 0x6b, (byte) 0x65, (byte) 0x79});
        fragmentationProvider.fragment(Single.just(TEST_FRAME_TO_MULTIPLE_FRAGMENTS_FRAME), TEST_FRAME_TO_MULTIPLE_FRAGMENTS_MAXLEN).test().assertNoErrors();
    }

    @Test
    public void transformsFrameToMultipleFragmentsWithoutWraparoundWithCorrectResult() throws BleException {
        int TEST_FRAME_TO_MULTIPLE_FRAGMENTS_MAXLEN = 32;
        Frame TEST_FRAME_TO_MULTIPLE_FRAGMENTS_FRAME = new BaseFrame((byte) 0x81, (byte) 0x00, (byte) 0x6a, new byte[]{(byte) 0x02, (byte) 0xa3, (byte) 0x01, (byte) 0x6b, (byte) 0x77, (byte) 0x65, (byte) 0x62, (byte) 0x61, (byte) 0x75, (byte) 0x74, (byte) 0x68, (byte) 0x6e, (byte) 0x2e, (byte) 0x69, (byte) 0x6f, (byte) 0x02, (byte) 0x58, (byte) 0x20, (byte) 0x28, (byte) 0x7a, (byte) 0x01, (byte) 0x7f, (byte) 0x92, (byte) 0x90, (byte) 0x15, (byte) 0x6f, (byte) 0x65, (byte) 0x61, (byte) 0x8f, (byte) 0x13, (byte) 0x42, (byte) 0xeb, (byte) 0x96, (byte) 0x53, (byte) 0x2e, (byte) 0x57, (byte) 0x6a, (byte) 0x78, (byte) 0x86, (byte) 0x0a, (byte) 0x25, (byte) 0xcc, (byte) 0x3b, (byte) 0x09, (byte) 0xcb, (byte) 0xb0, (byte) 0x95, (byte) 0x93, (byte) 0xf7, (byte) 0xb9, (byte) 0x03, (byte) 0x81, (byte) 0xa2, (byte) 0x62, (byte) 0x69, (byte) 0x64, (byte) 0x58, (byte) 0x20, (byte) 0x7c, (byte) 0xe0, (byte) 0xbe, (byte) 0xf2, (byte) 0x27, (byte) 0x8e, (byte) 0x10, (byte) 0xc4, (byte) 0x74, (byte) 0x75, (byte) 0xfd, (byte) 0xde, (byte) 0x1b, (byte) 0x4d, (byte) 0xc7, (byte) 0x20, (byte) 0x4d, (byte) 0xf9, (byte) 0x73, (byte) 0xd5, (byte) 0xa8, (byte) 0xa8, (byte) 0xae, (byte) 0xd1, (byte) 0x4f, (byte) 0x32, (byte) 0x27, (byte) 0x44, (byte) 0x24, (byte) 0xa8, (byte) 0xe5, (byte) 0x42, (byte) 0x64, (byte) 0x74, (byte) 0x79, (byte) 0x70, (byte) 0x65, (byte) 0x6a, (byte) 0x70, (byte) 0x75, (byte) 0x62, (byte) 0x6c, (byte) 0x69, (byte) 0x63, (byte) 0x2d, (byte) 0x6b, (byte) 0x65, (byte) 0x79});

        Fragment TEST_FRAME_TO_MULTIPLE_FRAGMENTS_RESULT_INIT_FRAG = new BaseInitializationFragment(TEST_FRAME_TO_MULTIPLE_FRAGMENTS_FRAME.getCMDSTAT(), TEST_FRAME_TO_MULTIPLE_FRAGMENTS_FRAME.getHLEN(), TEST_FRAME_TO_MULTIPLE_FRAGMENTS_FRAME.getLLEN(), new byte[]{(byte) 0x02, (byte) 0xa3, (byte) 0x01, (byte) 0x6b, (byte) 0x77, (byte) 0x65, (byte) 0x62, (byte) 0x61, (byte) 0x75, (byte) 0x74, (byte) 0x68, (byte) 0x6e, (byte) 0x2e, (byte) 0x69, (byte) 0x6f, (byte) 0x02, (byte) 0x58, (byte) 0x20, (byte) 0x28, (byte) 0x7a, (byte) 0x01, (byte) 0x7f, (byte) 0x92, (byte) 0x90, (byte) 0x15, (byte) 0x6f, (byte) 0x65, (byte) 0x61, (byte) 0x8f});
        Fragment TEST_FRAME_TO_MULTIPLE_FRAGMENTS_RESULT_CONT_FRAG_0 = new BaseContinuationFragment((byte) 0, new byte[]{(byte) 0x13, (byte) 0x42, (byte) 0xeb, (byte) 0x96, (byte) 0x53, (byte) 0x2e, (byte) 0x57, (byte) 0x6a, (byte) 0x78, (byte) 0x86, (byte) 0x0a, (byte) 0x25, (byte) 0xcc, (byte) 0x3b, (byte) 0x09, (byte) 0xcb, (byte) 0xb0, (byte) 0x95, (byte) 0x93, (byte) 0xf7, (byte) 0xb9, (byte) 0x03, (byte) 0x81, (byte) 0xa2, (byte) 0x62, (byte) 0x69, (byte) 0x64, (byte) 0x58, (byte) 0x20, (byte) 0x7c, (byte) 0xe0});
        Fragment TEST_FRAME_TO_MULTIPLE_FRAGMENTS_RESULT_CONT_FRAG_1 = new BaseContinuationFragment((byte) 1, new byte[]{(byte) 0xbe, (byte) 0xf2, (byte) 0x27, (byte) 0x8e, (byte) 0x10, (byte) 0xc4, (byte) 0x74, (byte) 0x75, (byte) 0xfd, (byte) 0xde, (byte) 0x1b, (byte) 0x4d, (byte) 0xc7, (byte) 0x20, (byte) 0x4d, (byte) 0xf9, (byte) 0x73, (byte) 0xd5, (byte) 0xa8, (byte) 0xa8, (byte) 0xae, (byte) 0xd1, (byte) 0x4f, (byte) 0x32, (byte) 0x27, (byte) 0x44, (byte) 0x24, (byte) 0xa8, (byte) 0xe5, (byte) 0x42, (byte) 0x64});
        Fragment TEST_FRAME_TO_MULTIPLE_FRAGMENTS_RESULT_CONT_FRAG_2 = new BaseContinuationFragment((byte) 2, new byte[]{(byte) 0x74, (byte) 0x79, (byte) 0x70, (byte) 0x65, (byte) 0x6a, (byte) 0x70, (byte) 0x75, (byte) 0x62, (byte) 0x6c, (byte) 0x69, (byte) 0x63, (byte) 0x2d, (byte) 0x6b, (byte) 0x65, (byte) 0x79});
        fragmentationProvider.fragment(Single.just(TEST_FRAME_TO_MULTIPLE_FRAGMENTS_FRAME), TEST_FRAME_TO_MULTIPLE_FRAGMENTS_MAXLEN).test().assertValues(TEST_FRAME_TO_MULTIPLE_FRAGMENTS_RESULT_INIT_FRAG, TEST_FRAME_TO_MULTIPLE_FRAGMENTS_RESULT_CONT_FRAG_0, TEST_FRAME_TO_MULTIPLE_FRAGMENTS_RESULT_CONT_FRAG_1, TEST_FRAME_TO_MULTIPLE_FRAGMENTS_RESULT_CONT_FRAG_2);
    }

    @Test
    public void transformsFrameToMultipleFragmentsWithSingleWraparoundWithoutErrors() throws BleException {
        int TEST_FRAME_TO_ONE_WRAPAROUND_MAXLEN = 24;
        byte[] TEST_FRAME_TO_ONE_WRAPAROUND_FRAME_DATA = new byte[0xc64];
        System.arraycopy(new byte[]{(byte) 0x02, (byte) 0xa3, (byte) 0x01, (byte) 0x6b, (byte) 0x77, (byte) 0x65, (byte) 0x62, (byte) 0x61, (byte) 0x75, (byte) 0x74, (byte) 0x68, (byte) 0x6e, (byte) 0x2e, (byte) 0x69, (byte) 0x6f, (byte) 0x02, (byte) 0x58, (byte) 0x20, (byte) 0x28, (byte) 0x7a, (byte) 0x01}, 0, TEST_FRAME_TO_ONE_WRAPAROUND_FRAME_DATA, 0, 21);
        // same continuation fragment is used multiple times
        for(int i = 1; i < 0x8A; i++)
            System.arraycopy(new byte[]{(byte) 0x7f, (byte) 0x92, (byte) 0x90, (byte) 0x15, (byte) 0x6f, (byte) 0x65, (byte) 0x61, (byte) 0x8f, (byte) 0x13, (byte) 0x42, (byte) 0xeb, (byte) 0x96, (byte) 0x53, (byte) 0x2e, (byte) 0x57, (byte) 0x6a, (byte) 0x78, (byte) 0x86, (byte) 0x0a, (byte) 0x25, (byte) 0xcc, (byte) 0x3b, (byte) 0x09}, 0, TEST_FRAME_TO_ONE_WRAPAROUND_FRAME_DATA, 21+23*(i-1), 23);
        Frame TEST_FRAME_TO_ONE_WRAPAROUND_FRAME = new BaseFrame((byte) 0x83, (byte) 0x0c, (byte) 0x64, TEST_FRAME_TO_ONE_WRAPAROUND_FRAME_DATA);
        fragmentationProvider.fragment(Single.just(TEST_FRAME_TO_ONE_WRAPAROUND_FRAME), TEST_FRAME_TO_ONE_WRAPAROUND_MAXLEN).test().assertNoErrors();
    }

    @Test
    public void transformsFrameToMultipleFragmentsWithSingleWraparoundWithCorrectResult() throws BleException {
        int TEST_FRAME_TO_ONE_WRAPAROUND_MAXLEN = 24;
        byte[] TEST_FRAME_TO_ONE_WRAPAROUND_FRAME_DATA = new byte[0xc64];
        System.arraycopy(new byte[]{(byte) 0x02, (byte) 0xa3, (byte) 0x01, (byte) 0x6b, (byte) 0x77, (byte) 0x65, (byte) 0x62, (byte) 0x61, (byte) 0x75, (byte) 0x74, (byte) 0x68, (byte) 0x6e, (byte) 0x2e, (byte) 0x69, (byte) 0x6f, (byte) 0x02, (byte) 0x58, (byte) 0x20, (byte) 0x28, (byte) 0x7a, (byte) 0x01}, 0, TEST_FRAME_TO_ONE_WRAPAROUND_FRAME_DATA, 0, 21);
        // same continuation fragment is used multiple times
        for(int i = 1; i < 0x8A; i++)
            System.arraycopy(new byte[]{(byte) 0x7f, (byte) 0x92, (byte) 0x90, (byte) 0x15, (byte) 0x6f, (byte) 0x65, (byte) 0x61, (byte) 0x8f, (byte) 0x13, (byte) 0x42, (byte) 0xeb, (byte) 0x96, (byte) 0x53, (byte) 0x2e, (byte) 0x57, (byte) 0x6a, (byte) 0x78, (byte) 0x86, (byte) 0x0a, (byte) 0x25, (byte) 0xcc, (byte) 0x3b, (byte) 0x09}, 0, TEST_FRAME_TO_ONE_WRAPAROUND_FRAME_DATA, 21+23*(i-1), 23);
        Frame TEST_FRAME_TO_ONE_WRAPAROUND_FRAME = new BaseFrame((byte) 0x83, (byte) 0x0c, (byte) 0x64, TEST_FRAME_TO_ONE_WRAPAROUND_FRAME_DATA);

        Fragment TEST_FRAME_TO_ONE_WRAPAROUND_RESULT_INIT_FRAG = new BaseInitializationFragment((byte) 0x83, (byte) 0x0c, (byte) 0x64, new byte[]{(byte) 0x02, (byte) 0xa3, (byte) 0x01, (byte) 0x6b, (byte) 0x77, (byte) 0x65, (byte) 0x62, (byte) 0x61, (byte) 0x75, (byte) 0x74, (byte) 0x68, (byte) 0x6e, (byte) 0x2e, (byte) 0x69, (byte) 0x6f, (byte) 0x02, (byte) 0x58, (byte) 0x20, (byte) 0x28, (byte) 0x7a, (byte) 0x01});
        byte[] TEST_FRAME_TO_ONE_WRAPAROUND_RESULT_CONT_FRAG_DATA = new byte[]{(byte) 0x7f, (byte) 0x92, (byte) 0x90, (byte) 0x15, (byte) 0x6f, (byte) 0x65, (byte) 0x61, (byte) 0x8f, (byte) 0x13, (byte) 0x42, (byte) 0xeb, (byte) 0x96, (byte) 0x53, (byte) 0x2e, (byte) 0x57, (byte) 0x6a, (byte) 0x78, (byte) 0x86, (byte) 0x0a, (byte) 0x25, (byte) 0xcc, (byte) 0x3b, (byte) 0x09};
        List<Fragment> TEST_FRAME_TO_ONE_WRAPAROUND_FRAGMENTS = new ArrayList<>();
        TEST_FRAME_TO_ONE_WRAPAROUND_FRAGMENTS.add(TEST_FRAME_TO_ONE_WRAPAROUND_RESULT_INIT_FRAG);
        for(int i = 0; i < 0x89; i++)
            TEST_FRAME_TO_ONE_WRAPAROUND_FRAGMENTS.add(new BaseContinuationFragment((byte) (i % 0x80), TEST_FRAME_TO_ONE_WRAPAROUND_RESULT_CONT_FRAG_DATA));
        fragmentationProvider.fragment(Single.just(TEST_FRAME_TO_ONE_WRAPAROUND_FRAME), TEST_FRAME_TO_ONE_WRAPAROUND_MAXLEN).test().assertValueSequence(TEST_FRAME_TO_ONE_WRAPAROUND_FRAGMENTS);
    }

    @Test
    public void transformsFrameToMultipleFragmentsWithMultipleWraparoundWithoutErrors() throws BleException {
        int TEST_FRAME_TO_MULTIPLE_WRAPAROUNDS_MAXLEN = 64;
        byte[] TEST_FRAME_TO_MULTIPLE_WRAPAROUNDS_FRAME_DATA = new byte[0x3efe];
        System.arraycopy(new byte[]{(byte) 0x02, (byte) 0xa3, (byte) 0x01, (byte) 0x6b, (byte) 0x77, (byte) 0x65, (byte) 0x62, (byte) 0x61, (byte) 0x75, (byte) 0x74, (byte) 0x68, (byte) 0x6e, (byte) 0x2e, (byte) 0x69, (byte) 0x6f, (byte) 0x02, (byte) 0x58, (byte) 0x20, (byte) 0x28, (byte) 0x7a, (byte) 0x01, (byte) 0x7f, (byte) 0x92, (byte) 0x90, (byte) 0x15, (byte) 0x6f, (byte) 0x65, (byte) 0x61, (byte) 0x8f, (byte) 0x13, (byte) 0x42, (byte) 0xeb, (byte) 0x96, (byte) 0x53, (byte) 0x2e, (byte) 0x57, (byte) 0x6a, (byte) 0x78, (byte) 0x86, (byte) 0x0a, (byte) 0x25, (byte) 0xcc, (byte) 0x3b, (byte) 0x09, (byte) 0xcb, (byte) 0xb0, (byte) 0x95, (byte) 0x93, (byte) 0xf7, (byte) 0xb9, (byte) 0x03, (byte) 0x81, (byte) 0xa2, (byte) 0x62, (byte) 0x69, (byte) 0x64, (byte) 0x58, (byte) 0x20, (byte) 0x7c, (byte) 0xe0, (byte) 0xbe}, 0, TEST_FRAME_TO_MULTIPLE_WRAPAROUNDS_FRAME_DATA, 0, 61);
        for(int i = 1; i < 0x100; i++)
            System.arraycopy(new byte[]{(byte) 0x13, (byte) 0x42, (byte) 0xeb, (byte) 0x96, (byte) 0x53, (byte) 0x2e, (byte) 0x57, (byte) 0x6a, (byte) 0x78, (byte) 0x86, (byte) 0x0a, (byte) 0x25, (byte) 0xcc, (byte) 0x3b, (byte) 0x09, (byte) 0xcb, (byte) 0xb0, (byte) 0x95, (byte) 0x93, (byte) 0xf7, (byte) 0xb9, (byte) 0x03, (byte) 0x81, (byte) 0xa2, (byte) 0x62, (byte) 0x69, (byte) 0x64, (byte) 0x58, (byte) 0x20, (byte) 0x7c, (byte) 0xe0, (byte) 0x1, (byte) 0xbe, (byte) 0xf2, (byte) 0x27, (byte) 0x8e, (byte) 0x10, (byte) 0xc4, (byte) 0x74, (byte) 0x75, (byte) 0xfd, (byte) 0xde, (byte) 0x1b, (byte) 0x4d, (byte) 0xc7, (byte) 0x20, (byte) 0x4d, (byte) 0xf9, (byte) 0x73, (byte) 0xd5, (byte) 0xa8, (byte) 0xa8, (byte) 0xae, (byte) 0xd1, (byte) 0x4f, (byte) 0x32, (byte) 0x27, (byte) 0x44, (byte) 0x24, (byte) 0xa8, (byte) 0xe5, (byte) 0x42, (byte) 0x64}, 0, TEST_FRAME_TO_MULTIPLE_WRAPAROUNDS_FRAME_DATA, 61+63*(i-1), 63);
        Frame TEST_FRAME_TO_ONE_WRAPAROUND_FRAME = new BaseFrame((byte) 0x83, (byte) 0x3e, (byte) 0xfe, TEST_FRAME_TO_MULTIPLE_WRAPAROUNDS_FRAME_DATA);
        fragmentationProvider.fragment(Single.just(TEST_FRAME_TO_ONE_WRAPAROUND_FRAME), TEST_FRAME_TO_MULTIPLE_WRAPAROUNDS_MAXLEN).test().assertNoErrors();
    }

    @Test
    public void transformsFrameToMultipleFragmentsWithMultipleWraparoundWithCorrectResult() throws BleException {
        int TEST_FRAME_TO_MULTIPLE_WRAPAROUNDS_MAXLEN = 64;
        byte[] TEST_FRAME_TO_MULTIPLE_WRAPAROUNDS_FRAME_DATA = new byte[0x3efe];
        System.arraycopy(new byte[]{(byte) 0x02, (byte) 0xa3, (byte) 0x01, (byte) 0x6b, (byte) 0x77, (byte) 0x65, (byte) 0x62, (byte) 0x61, (byte) 0x75, (byte) 0x74, (byte) 0x68, (byte) 0x6e, (byte) 0x2e, (byte) 0x69, (byte) 0x6f, (byte) 0x02, (byte) 0x58, (byte) 0x20, (byte) 0x28, (byte) 0x7a, (byte) 0x01, (byte) 0x7f, (byte) 0x92, (byte) 0x90, (byte) 0x15, (byte) 0x6f, (byte) 0x65, (byte) 0x61, (byte) 0x8f, (byte) 0x13, (byte) 0x42, (byte) 0xeb, (byte) 0x96, (byte) 0x53, (byte) 0x2e, (byte) 0x57, (byte) 0x6a, (byte) 0x78, (byte) 0x86, (byte) 0x0a, (byte) 0x25, (byte) 0xcc, (byte) 0x3b, (byte) 0x09, (byte) 0xcb, (byte) 0xb0, (byte) 0x95, (byte) 0x93, (byte) 0xf7, (byte) 0xb9, (byte) 0x03, (byte) 0x81, (byte) 0xa2, (byte) 0x62, (byte) 0x69, (byte) 0x64, (byte) 0x58, (byte) 0x20, (byte) 0x7c, (byte) 0xe0, (byte) 0xbe}, 0, TEST_FRAME_TO_MULTIPLE_WRAPAROUNDS_FRAME_DATA, 0, 61);
        for(int i = 1; i < 0x100; i++)
            System.arraycopy(new byte[]{(byte) 0x13, (byte) 0x42, (byte) 0xeb, (byte) 0x96, (byte) 0x53, (byte) 0x2e, (byte) 0x57, (byte) 0x6a, (byte) 0x78, (byte) 0x86, (byte) 0x0a, (byte) 0x25, (byte) 0xcc, (byte) 0x3b, (byte) 0x09, (byte) 0xcb, (byte) 0xb0, (byte) 0x95, (byte) 0x93, (byte) 0xf7, (byte) 0xb9, (byte) 0x03, (byte) 0x81, (byte) 0xa2, (byte) 0x62, (byte) 0x69, (byte) 0x64, (byte) 0x58, (byte) 0x20, (byte) 0x7c, (byte) 0xe0, (byte) 0x1, (byte) 0xbe, (byte) 0xf2, (byte) 0x27, (byte) 0x8e, (byte) 0x10, (byte) 0xc4, (byte) 0x74, (byte) 0x75, (byte) 0xfd, (byte) 0xde, (byte) 0x1b, (byte) 0x4d, (byte) 0xc7, (byte) 0x20, (byte) 0x4d, (byte) 0xf9, (byte) 0x73, (byte) 0xd5, (byte) 0xa8, (byte) 0xa8, (byte) 0xae, (byte) 0xd1, (byte) 0x4f, (byte) 0x32, (byte) 0x27, (byte) 0x44, (byte) 0x24, (byte) 0xa8, (byte) 0xe5, (byte) 0x42, (byte) 0x64}, 0, TEST_FRAME_TO_MULTIPLE_WRAPAROUNDS_FRAME_DATA, 61+63*(i-1), 63);
        Frame TEST_FRAME_TO_ONE_WRAPAROUND_FRAME = new BaseFrame((byte) 0x83, (byte) 0x3e, (byte) 0xfe, TEST_FRAME_TO_MULTIPLE_WRAPAROUNDS_FRAME_DATA);

        Fragment TEST_FRAME_TO_MULTIPLE_WRAPAROUNDS_RESULT_INIT_FRAG = new BaseInitializationFragment((byte) 0x83, (byte) 0x3e, (byte) 0xfe, new byte[]{(byte) 0x02, (byte) 0xa3, (byte) 0x01, (byte) 0x6b, (byte) 0x77, (byte) 0x65, (byte) 0x62, (byte) 0x61, (byte) 0x75, (byte) 0x74, (byte) 0x68, (byte) 0x6e, (byte) 0x2e, (byte) 0x69, (byte) 0x6f, (byte) 0x02, (byte) 0x58, (byte) 0x20, (byte) 0x28, (byte) 0x7a, (byte) 0x01, (byte) 0x7f, (byte) 0x92, (byte) 0x90, (byte) 0x15, (byte) 0x6f, (byte) 0x65, (byte) 0x61, (byte) 0x8f, (byte) 0x13, (byte) 0x42, (byte) 0xeb, (byte) 0x96, (byte) 0x53, (byte) 0x2e, (byte) 0x57, (byte) 0x6a, (byte) 0x78, (byte) 0x86, (byte) 0x0a, (byte) 0x25, (byte) 0xcc, (byte) 0x3b, (byte) 0x09, (byte) 0xcb, (byte) 0xb0, (byte) 0x95, (byte) 0x93, (byte) 0xf7, (byte) 0xb9, (byte) 0x03, (byte) 0x81, (byte) 0xa2, (byte) 0x62, (byte) 0x69, (byte) 0x64, (byte) 0x58, (byte) 0x20, (byte) 0x7c, (byte) 0xe0, (byte) 0xbe});
        byte[] TEST_FRAME_TO_MULTIPLE_WRAPAROUNDS_RESULT_CONT_FRAG_DATA = new byte[]{(byte) 0x13, (byte) 0x42, (byte) 0xeb, (byte) 0x96, (byte) 0x53, (byte) 0x2e, (byte) 0x57, (byte) 0x6a, (byte) 0x78, (byte) 0x86, (byte) 0x0a, (byte) 0x25, (byte) 0xcc, (byte) 0x3b, (byte) 0x09, (byte) 0xcb, (byte) 0xb0, (byte) 0x95, (byte) 0x93, (byte) 0xf7, (byte) 0xb9, (byte) 0x03, (byte) 0x81, (byte) 0xa2, (byte) 0x62, (byte) 0x69, (byte) 0x64, (byte) 0x58, (byte) 0x20, (byte) 0x7c, (byte) 0xe0, (byte) 0x1, (byte) 0xbe, (byte) 0xf2, (byte) 0x27, (byte) 0x8e, (byte) 0x10, (byte) 0xc4, (byte) 0x74, (byte) 0x75, (byte) 0xfd, (byte) 0xde, (byte) 0x1b, (byte) 0x4d, (byte) 0xc7, (byte) 0x20, (byte) 0x4d, (byte) 0xf9, (byte) 0x73, (byte) 0xd5, (byte) 0xa8, (byte) 0xa8, (byte) 0xae, (byte) 0xd1, (byte) 0x4f, (byte) 0x32, (byte) 0x27, (byte) 0x44, (byte) 0x24, (byte) 0xa8, (byte) 0xe5, (byte) 0x42, (byte) 0x64};
        List<Fragment> TEST_FRAME_TO_MULTIPLE_WRAPAROUNDS_FRAGMENTS = new ArrayList<>();
        TEST_FRAME_TO_MULTIPLE_WRAPAROUNDS_FRAGMENTS.add(TEST_FRAME_TO_MULTIPLE_WRAPAROUNDS_RESULT_INIT_FRAG);
        // same continuation fragment is used multiple times
        for(int i = 0; i < 0xff; i++)
            TEST_FRAME_TO_MULTIPLE_WRAPAROUNDS_FRAGMENTS.add(new BaseContinuationFragment((byte) (i % 0x80), TEST_FRAME_TO_MULTIPLE_WRAPAROUNDS_RESULT_CONT_FRAG_DATA ));
        fragmentationProvider.fragment(Single.just(TEST_FRAME_TO_ONE_WRAPAROUND_FRAME), TEST_FRAME_TO_MULTIPLE_WRAPAROUNDS_MAXLEN).test().assertValueSequence(TEST_FRAME_TO_MULTIPLE_WRAPAROUNDS_FRAGMENTS);
    }

    @Test
    public void transformsFrameWithSmallestMaxLenWithoutErrors() throws BleException {
        int TEST_FRAME_WITH_SMALLEST_MAXLEN_MAXLEN = 3;
        Frame TEST_FRAME_WITH_SMALLEST_MAXLEN_FRAME = new BaseFrame((byte) 0x83, (byte) 0x00, (byte) 0x02, new byte[]{(byte) 0xa3, (byte) 0x1});
        fragmentationProvider.fragment(Single.just(TEST_FRAME_WITH_SMALLEST_MAXLEN_FRAME), TEST_FRAME_WITH_SMALLEST_MAXLEN_MAXLEN).test().assertNoErrors();
    }

    @Test
    public void transformsFrameWithSmallestMaxLenWithCorrectResult() throws BleException {
        int TEST_FRAME_WITH_SMALLEST_MAXLEN_MAXLEN = 3;
        Frame TEST_FRAME_WITH_SMALLEST_MAXLEN_FRAME = new BaseFrame((byte) 0x83, (byte) 0x00, (byte) 0x02, new byte[]{(byte) 0xa3, (byte) 0x1});

        Fragment TEST_FRAME_WITH_SMALLEST_MAXLEN_RESULT_INIT_FRAG = new BaseInitializationFragment((byte) 0x83, (byte) 0x00, (byte) 0x02, new byte[]{});
        Fragment TEST_FRAME_WITH_SMALLEST_MAXLEN_RESULT_CONT_FRAG = new BaseContinuationFragment((byte) 0x00, new byte[]{(byte) 0xa3, (byte) 0x1});
        fragmentationProvider.fragment(Single.just(TEST_FRAME_WITH_SMALLEST_MAXLEN_FRAME), TEST_FRAME_WITH_SMALLEST_MAXLEN_MAXLEN).test().assertValues(TEST_FRAME_WITH_SMALLEST_MAXLEN_RESULT_INIT_FRAG, TEST_FRAME_WITH_SMALLEST_MAXLEN_RESULT_CONT_FRAG);
    }

    @Test
    public void transformsMultipleFramesWithCorrectResult() throws BleException {
        int TEST_MULTIPLE_FRAMES_MAXLEN = 109;
        Frame TEST_MULTIPLE_FRAMES_FRAME_0 = new BaseFrame((byte) 0x81, (byte) 0x00, (byte) 0x6a, new byte[]{(byte) 0x02, (byte) 0xa3, (byte) 0x01, (byte) 0x6b, (byte) 0x77, (byte) 0x65, (byte) 0x62, (byte) 0x61, (byte) 0x75, (byte) 0x74, (byte) 0x68, (byte) 0x6e, (byte) 0x2e, (byte) 0x69, (byte) 0x6f, (byte) 0x02, (byte) 0x58, (byte) 0x20, (byte) 0x28, (byte) 0x7a, (byte) 0x01, (byte) 0x7f, (byte) 0x92, (byte) 0x90, (byte) 0x15, (byte) 0x6f, (byte) 0x65, (byte) 0x61, (byte) 0x8f, (byte) 0x13, (byte) 0x42, (byte) 0xeb, (byte) 0x96, (byte) 0x53, (byte) 0x2e, (byte) 0x57, (byte) 0x6a, (byte) 0x78, (byte) 0x86, (byte) 0x0a, (byte) 0x25, (byte) 0xcc, (byte) 0x3b, (byte) 0x09, (byte) 0xcb, (byte) 0xb0, (byte) 0x95, (byte) 0x93, (byte) 0xf7, (byte) 0xb9, (byte) 0x03, (byte) 0x81, (byte) 0xa2, (byte) 0x62, (byte) 0x69, (byte) 0x64, (byte) 0x58, (byte) 0x20, (byte) 0x7c, (byte) 0xe0, (byte) 0xbe, (byte) 0xf2, (byte) 0x27, (byte) 0x8e, (byte) 0x10, (byte) 0xc4, (byte) 0x74, (byte) 0x75, (byte) 0xfd, (byte) 0xde, (byte) 0x1b, (byte) 0x4d, (byte) 0xc7, (byte) 0x20, (byte) 0x4d, (byte) 0xf9, (byte) 0x73, (byte) 0xd5, (byte) 0xa8, (byte) 0xa8, (byte) 0xae, (byte) 0xd1, (byte) 0x4f, (byte) 0x32, (byte) 0x27, (byte) 0x44, (byte) 0x24, (byte) 0xa8, (byte) 0xe5, (byte) 0x42, (byte) 0x64, (byte) 0x74, (byte) 0x79, (byte) 0x70, (byte) 0x65, (byte) 0x6a, (byte) 0x70, (byte) 0x75, (byte) 0x62, (byte) 0x6c, (byte) 0x69, (byte) 0x63, (byte) 0x2d, (byte) 0x6b, (byte) 0x65, (byte) 0x79});
        Frame TEST_MULTIPLE_FRAMES_FRAME_1 = new BaseFrame((byte) 0x83, (byte) 0x01, (byte) 0x42, new byte[]{(byte) 0x01, (byte) 0xa3, (byte) 0x01, (byte) 0x6b, (byte) 0x77, (byte) 0x65, (byte) 0x62, (byte) 0x61, (byte) 0x75, (byte) 0x74, (byte) 0x68, (byte) 0x6e, (byte) 0x2e, (byte) 0x69, (byte) 0x6f, (byte) 0x02, (byte) 0x58, (byte) 0x20, (byte) 0x28, (byte) 0x7a, (byte) 0x01, (byte) 0x7f, (byte) 0x92, (byte) 0x90, (byte) 0x15, (byte) 0x6f, (byte) 0x65, (byte) 0x61, (byte) 0x8f, (byte) 0x13, (byte) 0x42, (byte) 0xeb, (byte) 0x96, (byte) 0x53, (byte) 0x2e, (byte) 0x57, (byte) 0x6a, (byte) 0x78, (byte) 0x86, (byte) 0x0a, (byte) 0x25, (byte) 0xcc, (byte) 0x3b, (byte) 0x09, (byte) 0xcb, (byte) 0xb0, (byte) 0x95, (byte) 0x93, (byte) 0xf7, (byte) 0xb9, (byte) 0x03, (byte) 0x81, (byte) 0xa2, (byte) 0x62, (byte) 0x69, (byte) 0x64, (byte) 0x58, (byte) 0x20, (byte) 0x7c, (byte) 0xe0, (byte) 0xbe, (byte) 0xf2, (byte) 0x27, (byte) 0x8e, (byte) 0x10, (byte) 0xc4, (byte) 0x74, (byte) 0x75, (byte) 0xfd, (byte) 0xde, (byte) 0x1b, (byte) 0x4d, (byte) 0xc7, (byte) 0x20, (byte) 0x4d, (byte) 0xf9, (byte) 0x73, (byte) 0xd5, (byte) 0xa8, (byte) 0xa8, (byte) 0xae, (byte) 0xd1, (byte) 0x4f, (byte) 0x32, (byte) 0x27, (byte) 0x44, (byte) 0x24, (byte) 0xa8, (byte) 0xe5, (byte) 0x42, (byte) 0x64, (byte) 0x74, (byte) 0x79, (byte) 0x70, (byte) 0x65, (byte) 0x6a, (byte) 0x70, (byte) 0x75, (byte) 0x62, (byte) 0x6c, (byte) 0x69, (byte) 0x63, (byte) 0x2d, (byte) 0x6b, (byte) 0x65, (byte) 0x79, (byte) 0x22, (byte) 0x2a, (byte) 0x25, (byte) 0xa3, (byte) 0x01, (byte) 0x0f, (byte) 0x52, (byte) 0xe2, (byte) 0x1a, (byte) 0x61, (byte) 0x75, (byte) 0x74, (byte) 0x68, (byte) 0x6e, (byte) 0x2e, (byte) 0x69, (byte) 0x6f, (byte) 0x02, (byte) 0x58, (byte) 0x20, (byte) 0x28, (byte) 0x7a, (byte) 0x01, (byte) 0x7f, (byte) 0x92, (byte) 0x90, (byte) 0x15, (byte) 0x6f, (byte) 0x65, (byte) 0x61, (byte) 0x8f, (byte) 0x13, (byte) 0x42, (byte) 0xeb, (byte) 0x96, (byte) 0x53, (byte) 0x2e, (byte) 0x57, (byte) 0x6a, (byte) 0x78, (byte) 0x86, (byte) 0x0a, (byte) 0x25, (byte) 0xcc, (byte) 0x3b, (byte) 0x09, (byte) 0xcb, (byte) 0xb0, (byte) 0x95, (byte) 0x93, (byte) 0xf7, (byte) 0xb9, (byte) 0x03, (byte) 0x81, (byte) 0xa2, (byte) 0x62, (byte) 0x69, (byte) 0x64, (byte) 0x58, (byte) 0x20, (byte) 0x7c, (byte) 0xe0, (byte) 0xbe, (byte) 0xf2, (byte) 0x27, (byte) 0x8e, (byte) 0x10, (byte) 0xc4, (byte) 0x74, (byte) 0x75, (byte) 0xfd, (byte) 0xde, (byte) 0x1b, (byte) 0x4d, (byte) 0xc7, (byte) 0x20, (byte) 0x4d, (byte) 0xf9, (byte) 0x73, (byte) 0xd5, (byte) 0xa8, (byte) 0xa8, (byte) 0xae, (byte) 0xd1, (byte) 0x4f, (byte) 0x32, (byte) 0x27, (byte) 0x44, (byte) 0x24, (byte) 0xa8, (byte) 0xe5, (byte) 0x42, (byte) 0x64, (byte) 0x74, (byte) 0x79, (byte) 0x70, (byte) 0x65, (byte) 0x6a, (byte) 0x70, (byte) 0x75, (byte) 0x62, (byte) 0x6c, (byte) 0x69, (byte) 0x63, (byte) 0x2d, (byte) 0x6b, (byte) 0x65, (byte) 0x79, (byte) 0x23, (byte) 0x6a, (byte) 0x02, (byte) 0xa3, (byte) 0x01, (byte) 0x6b, (byte) 0x77, (byte) 0x65, (byte) 0x62, (byte) 0x61, (byte) 0x75, (byte) 0x74, (byte) 0x68, (byte) 0x6e, (byte) 0x2e, (byte) 0x69, (byte) 0x6f, (byte) 0x02, (byte) 0x58, (byte) 0x20, (byte) 0x28, (byte) 0x7a, (byte) 0x01, (byte) 0x7f, (byte) 0x92, (byte) 0x90, (byte) 0x15, (byte) 0x6f, (byte) 0x65, (byte) 0x61, (byte) 0x8f, (byte) 0x13, (byte) 0x42, (byte) 0xeb, (byte) 0x96, (byte) 0x53, (byte) 0x2e, (byte) 0x57, (byte) 0x6a, (byte) 0x78, (byte) 0x86, (byte) 0x0a, (byte) 0x25, (byte) 0xcc, (byte) 0x3b, (byte) 0x09, (byte) 0xcb, (byte) 0xb0, (byte) 0x95, (byte) 0x93, (byte) 0xf7, (byte) 0xb9, (byte) 0x03, (byte) 0x81, (byte) 0xa2, (byte) 0x62, (byte) 0x69, (byte) 0x64, (byte) 0x58, (byte) 0x20, (byte) 0x7c, (byte) 0xe0, (byte) 0xbe, (byte) 0xf2, (byte) 0x27, (byte) 0x8e, (byte) 0x10, (byte) 0xc4, (byte) 0x74, (byte) 0x75, (byte) 0xfd, (byte) 0xde, (byte) 0x1b, (byte) 0x4d, (byte) 0xc7, (byte) 0x20, (byte) 0x4d, (byte) 0xf9, (byte) 0x73, (byte) 0xd5, (byte) 0xa8, (byte) 0xa8, (byte) 0xae, (byte) 0xd1, (byte) 0x4f, (byte) 0x32, (byte) 0x27, (byte) 0x44, (byte) 0x24, (byte) 0xa8, (byte) 0xe5, (byte) 0x42, (byte) 0x64, (byte) 0x74, (byte) 0x79, (byte) 0x70, (byte) 0x65, (byte) 0x6a, (byte) 0x70, (byte) 0x75, (byte) 0x62, (byte) 0x6c, (byte) 0x69, (byte) 0x63, (byte) 0x2d, (byte) 0x6b, (byte) 0x65, (byte) 0x79});
        byte[] TEST_MULTIPLE_FRAMES_FRAME_2_DATA = new byte[0x366a];
        System.arraycopy(new byte[]{(byte) 0x02, (byte) 0xa3, (byte) 0x01, (byte) 0x6b, (byte) 0x77, (byte) 0x65, (byte) 0x62, (byte) 0x61, (byte) 0x75, (byte) 0x74, (byte) 0x68, (byte) 0x6e, (byte) 0x2e, (byte) 0x69, (byte) 0x6f, (byte) 0x02, (byte) 0x58, (byte) 0x20, (byte) 0x28, (byte) 0x7a, (byte) 0x01, (byte) 0x7f, (byte) 0x92, (byte) 0x90, (byte) 0x15, (byte) 0x6f, (byte) 0x65, (byte) 0x61, (byte) 0x8f, (byte) 0x13, (byte) 0x42, (byte) 0xeb, (byte) 0x96, (byte) 0x53, (byte) 0x2e, (byte) 0x57, (byte) 0x6a, (byte) 0x78, (byte) 0x86, (byte) 0x0a, (byte) 0x25, (byte) 0xcc, (byte) 0x3b, (byte) 0x09, (byte) 0xcb, (byte) 0xb0, (byte) 0x95, (byte) 0x93, (byte) 0xf7, (byte) 0xb9, (byte) 0x03, (byte) 0x81, (byte) 0xa2, (byte) 0x62, (byte) 0x69, (byte) 0x64, (byte) 0x58, (byte) 0x20, (byte) 0x7c, (byte) 0xe0, (byte) 0xbe, (byte) 0xf2, (byte) 0x27, (byte) 0x8e, (byte) 0x10, (byte) 0xc4, (byte) 0x74, (byte) 0x75, (byte) 0xfd, (byte) 0xde, (byte) 0x1b, (byte) 0x4d, (byte) 0xc7, (byte) 0x20, (byte) 0x4d, (byte) 0xf9, (byte) 0x73, (byte) 0xd5, (byte) 0xa8, (byte) 0xa8, (byte) 0xae, (byte) 0xd1, (byte) 0x4f, (byte) 0x32, (byte) 0x27, (byte) 0x44, (byte) 0x24, (byte) 0xa8, (byte) 0xe5, (byte) 0x42, (byte) 0x64, (byte) 0x74, (byte) 0x79, (byte) 0x70, (byte) 0x65, (byte) 0x6a, (byte) 0x70, (byte) 0x75, (byte) 0x62, (byte) 0x6c, (byte) 0x69, (byte) 0x63, (byte) 0x2d, (byte) 0x6b, (byte) 0x65, (byte) 0x79}, 0, TEST_MULTIPLE_FRAMES_FRAME_2_DATA, 0, 106);
        for(int i = 0; i < 0x80; i++)
            System.arraycopy(new byte[]{(byte) 0x22, (byte) 0x2a, (byte) 0x25, (byte) 0xa3, (byte) 0x01, (byte) 0x0f, (byte) 0x52, (byte) 0xe2, (byte) 0x1a, (byte) 0x61, (byte) 0x75, (byte) 0x74, (byte) 0x68, (byte) 0x6e, (byte) 0x2e, (byte) 0x69, (byte) 0x6f, (byte) 0x02, (byte) 0x58, (byte) 0x20, (byte) 0x28, (byte) 0x7a, (byte) 0x01, (byte) 0x7f, (byte) 0x92, (byte) 0x90, (byte) 0x15, (byte) 0x6f, (byte) 0x65, (byte) 0x61, (byte) 0x8f, (byte) 0x13, (byte) 0x42, (byte) 0xeb, (byte) 0x96, (byte) 0x53, (byte) 0x2e, (byte) 0x57, (byte) 0x6a, (byte) 0x78, (byte) 0x86, (byte) 0x0a, (byte) 0x25, (byte) 0xcc, (byte) 0x3b, (byte) 0x09, (byte) 0xcb, (byte) 0xb0, (byte) 0x95, (byte) 0x93, (byte) 0xf7, (byte) 0xb9, (byte) 0x03, (byte) 0x81, (byte) 0xa2, (byte) 0x62, (byte) 0x69, (byte) 0x64, (byte) 0x58, (byte) 0x20, (byte) 0x7c, (byte) 0xe0, (byte) 0xbe, (byte) 0xf2, (byte) 0x27, (byte) 0x8e, (byte) 0x10, (byte) 0xc4, (byte) 0x74, (byte) 0x75, (byte) 0xfd, (byte) 0xde, (byte) 0x1b, (byte) 0x4d, (byte) 0xc7, (byte) 0x20, (byte) 0x4d, (byte) 0xf9, (byte) 0x73, (byte) 0xd5, (byte) 0xa8, (byte) 0xa8, (byte) 0xae, (byte) 0xd1, (byte) 0x4f, (byte) 0x32, (byte) 0x27, (byte) 0x44, (byte) 0x24, (byte) 0xa8, (byte) 0xe5, (byte) 0x42, (byte) 0x64, (byte) 0x74, (byte) 0x79, (byte) 0x70, (byte) 0x65, (byte) 0x6a, (byte) 0x70, (byte) 0x75, (byte) 0x62, (byte) 0x6c, (byte) 0x69, (byte) 0x63, (byte) 0x2d, (byte) 0x6b, (byte) 0x65, (byte) 0x79}, 0, TEST_MULTIPLE_FRAMES_FRAME_2_DATA, 106+i*108, 108);
        Frame TEST_MULTIPLE_FRAMES_FRAME_2 = new BaseFrame((byte) 0x83, (byte) 0x36, (byte) 0x6a, TEST_MULTIPLE_FRAMES_FRAME_2_DATA);

        List<List<Fragment>> TEST_MULTIPLE_FRAMES_FRAME_FRAGMENTS = new ArrayList<>();
        List<Fragment> TEST_MULTIPLE_FRAMES_FRAME_0_FRAGMENTS = new ArrayList<>();
        Fragment TEST_MULTIPLE_FRAMES_FRAME_0_RESULT_INIT_FRAG = new BaseInitializationFragment((byte) 0x81, (byte) 0x00, (byte) 0x6a, new byte[]{(byte) 0x02, (byte) 0xa3, (byte) 0x01, (byte) 0x6b, (byte) 0x77, (byte) 0x65, (byte) 0x62, (byte) 0x61, (byte) 0x75, (byte) 0x74, (byte) 0x68, (byte) 0x6e, (byte) 0x2e, (byte) 0x69, (byte) 0x6f, (byte) 0x02, (byte) 0x58, (byte) 0x20, (byte) 0x28, (byte) 0x7a, (byte) 0x01, (byte) 0x7f, (byte) 0x92, (byte) 0x90, (byte) 0x15, (byte) 0x6f, (byte) 0x65, (byte) 0x61, (byte) 0x8f, (byte) 0x13, (byte) 0x42, (byte) 0xeb, (byte) 0x96, (byte) 0x53, (byte) 0x2e, (byte) 0x57, (byte) 0x6a, (byte) 0x78, (byte) 0x86, (byte) 0x0a, (byte) 0x25, (byte) 0xcc, (byte) 0x3b, (byte) 0x09, (byte) 0xcb, (byte) 0xb0, (byte) 0x95, (byte) 0x93, (byte) 0xf7, (byte) 0xb9, (byte) 0x03, (byte) 0x81, (byte) 0xa2, (byte) 0x62, (byte) 0x69, (byte) 0x64, (byte) 0x58, (byte) 0x20, (byte) 0x7c, (byte) 0xe0, (byte) 0xbe, (byte) 0xf2, (byte) 0x27, (byte) 0x8e, (byte) 0x10, (byte) 0xc4, (byte) 0x74, (byte) 0x75, (byte) 0xfd, (byte) 0xde, (byte) 0x1b, (byte) 0x4d, (byte) 0xc7, (byte) 0x20, (byte) 0x4d, (byte) 0xf9, (byte) 0x73, (byte) 0xd5, (byte) 0xa8, (byte) 0xa8, (byte) 0xae, (byte) 0xd1, (byte) 0x4f, (byte) 0x32, (byte) 0x27, (byte) 0x44, (byte) 0x24, (byte) 0xa8, (byte) 0xe5, (byte) 0x42, (byte) 0x64, (byte) 0x74, (byte) 0x79, (byte) 0x70, (byte) 0x65, (byte) 0x6a, (byte) 0x70, (byte) 0x75, (byte) 0x62, (byte) 0x6c, (byte) 0x69, (byte) 0x63, (byte) 0x2d, (byte) 0x6b, (byte) 0x65, (byte) 0x79});
        TEST_MULTIPLE_FRAMES_FRAME_0_FRAGMENTS.add(TEST_MULTIPLE_FRAMES_FRAME_0_RESULT_INIT_FRAG);
        TEST_MULTIPLE_FRAMES_FRAME_FRAGMENTS.add(TEST_MULTIPLE_FRAMES_FRAME_0_FRAGMENTS);
        List<Fragment> TEST_MULTIPLE_FRAMES_FRAME_1_FRAGMENTS = new ArrayList<>();
        Fragment TEST_MULTIPLE_FRAMES_FRAME_1_RESULT_INIT_FRAG = new BaseInitializationFragment((byte) 0x83, (byte) 0x01, (byte) 0x42, new byte[]{(byte) 0x01, (byte) 0xa3, (byte) 0x01, (byte) 0x6b, (byte) 0x77, (byte) 0x65, (byte) 0x62, (byte) 0x61, (byte) 0x75, (byte) 0x74, (byte) 0x68, (byte) 0x6e, (byte) 0x2e, (byte) 0x69, (byte) 0x6f, (byte) 0x02, (byte) 0x58, (byte) 0x20, (byte) 0x28, (byte) 0x7a, (byte) 0x01, (byte) 0x7f, (byte) 0x92, (byte) 0x90, (byte) 0x15, (byte) 0x6f, (byte) 0x65, (byte) 0x61, (byte) 0x8f, (byte) 0x13, (byte) 0x42, (byte) 0xeb, (byte) 0x96, (byte) 0x53, (byte) 0x2e, (byte) 0x57, (byte) 0x6a, (byte) 0x78, (byte) 0x86, (byte) 0x0a, (byte) 0x25, (byte) 0xcc, (byte) 0x3b, (byte) 0x09, (byte) 0xcb, (byte) 0xb0, (byte) 0x95, (byte) 0x93, (byte) 0xf7, (byte) 0xb9, (byte) 0x03, (byte) 0x81, (byte) 0xa2, (byte) 0x62, (byte) 0x69, (byte) 0x64, (byte) 0x58, (byte) 0x20, (byte) 0x7c, (byte) 0xe0, (byte) 0xbe, (byte) 0xf2, (byte) 0x27, (byte) 0x8e, (byte) 0x10, (byte) 0xc4, (byte) 0x74, (byte) 0x75, (byte) 0xfd, (byte) 0xde, (byte) 0x1b, (byte) 0x4d, (byte) 0xc7, (byte) 0x20, (byte) 0x4d, (byte) 0xf9, (byte) 0x73, (byte) 0xd5, (byte) 0xa8, (byte) 0xa8, (byte) 0xae, (byte) 0xd1, (byte) 0x4f, (byte) 0x32, (byte) 0x27, (byte) 0x44, (byte) 0x24, (byte) 0xa8, (byte) 0xe5, (byte) 0x42, (byte) 0x64, (byte) 0x74, (byte) 0x79, (byte) 0x70, (byte) 0x65, (byte) 0x6a, (byte) 0x70, (byte) 0x75, (byte) 0x62, (byte) 0x6c, (byte) 0x69, (byte) 0x63, (byte) 0x2d, (byte) 0x6b, (byte) 0x65, (byte) 0x79});
        TEST_MULTIPLE_FRAMES_FRAME_1_FRAGMENTS.add(TEST_MULTIPLE_FRAMES_FRAME_1_RESULT_INIT_FRAG);
        Fragment TEST_MULTIPLE_FRAMES_FRAME_1_RESULT_CONT_FRAG_0 = new BaseContinuationFragment((byte) 0, new byte[]{(byte) 0x22, (byte) 0x2a, (byte) 0x25, (byte) 0xa3, (byte) 0x01, (byte) 0x0f, (byte) 0x52, (byte) 0xe2, (byte) 0x1a, (byte) 0x61, (byte) 0x75, (byte) 0x74, (byte) 0x68, (byte) 0x6e, (byte) 0x2e, (byte) 0x69, (byte) 0x6f, (byte) 0x02, (byte) 0x58, (byte) 0x20, (byte) 0x28, (byte) 0x7a, (byte) 0x01, (byte) 0x7f, (byte) 0x92, (byte) 0x90, (byte) 0x15, (byte) 0x6f, (byte) 0x65, (byte) 0x61, (byte) 0x8f, (byte) 0x13, (byte) 0x42, (byte) 0xeb, (byte) 0x96, (byte) 0x53, (byte) 0x2e, (byte) 0x57, (byte) 0x6a, (byte) 0x78, (byte) 0x86, (byte) 0x0a, (byte) 0x25, (byte) 0xcc, (byte) 0x3b, (byte) 0x09, (byte) 0xcb, (byte) 0xb0, (byte) 0x95, (byte) 0x93, (byte) 0xf7, (byte) 0xb9, (byte) 0x03, (byte) 0x81, (byte) 0xa2, (byte) 0x62, (byte) 0x69, (byte) 0x64, (byte) 0x58, (byte) 0x20, (byte) 0x7c, (byte) 0xe0, (byte) 0xbe, (byte) 0xf2, (byte) 0x27, (byte) 0x8e, (byte) 0x10, (byte) 0xc4, (byte) 0x74, (byte) 0x75, (byte) 0xfd, (byte) 0xde, (byte) 0x1b, (byte) 0x4d, (byte) 0xc7, (byte) 0x20, (byte) 0x4d, (byte) 0xf9, (byte) 0x73, (byte) 0xd5, (byte) 0xa8, (byte) 0xa8, (byte) 0xae, (byte) 0xd1, (byte) 0x4f, (byte) 0x32, (byte) 0x27, (byte) 0x44, (byte) 0x24, (byte) 0xa8, (byte) 0xe5, (byte) 0x42, (byte) 0x64, (byte) 0x74, (byte) 0x79, (byte) 0x70, (byte) 0x65, (byte) 0x6a, (byte) 0x70, (byte) 0x75, (byte) 0x62, (byte) 0x6c, (byte) 0x69, (byte) 0x63, (byte) 0x2d, (byte) 0x6b, (byte) 0x65, (byte) 0x79});
        TEST_MULTIPLE_FRAMES_FRAME_1_FRAGMENTS.add(TEST_MULTIPLE_FRAMES_FRAME_1_RESULT_CONT_FRAG_0);
        Fragment TEST_MULTIPLE_FRAMES_FRAME_1_RESULT_CONT_FRAG_1 = new BaseContinuationFragment((byte) 1, new byte[]{(byte) 0x23, (byte) 0x6a, (byte) 0x02, (byte) 0xa3, (byte) 0x01, (byte) 0x6b, (byte) 0x77, (byte) 0x65, (byte) 0x62, (byte) 0x61, (byte) 0x75, (byte) 0x74, (byte) 0x68, (byte) 0x6e, (byte) 0x2e, (byte) 0x69, (byte) 0x6f, (byte) 0x02, (byte) 0x58, (byte) 0x20, (byte) 0x28, (byte) 0x7a, (byte) 0x01, (byte) 0x7f, (byte) 0x92, (byte) 0x90, (byte) 0x15, (byte) 0x6f, (byte) 0x65, (byte) 0x61, (byte) 0x8f, (byte) 0x13, (byte) 0x42, (byte) 0xeb, (byte) 0x96, (byte) 0x53, (byte) 0x2e, (byte) 0x57, (byte) 0x6a, (byte) 0x78, (byte) 0x86, (byte) 0x0a, (byte) 0x25, (byte) 0xcc, (byte) 0x3b, (byte) 0x09, (byte) 0xcb, (byte) 0xb0, (byte) 0x95, (byte) 0x93, (byte) 0xf7, (byte) 0xb9, (byte) 0x03, (byte) 0x81, (byte) 0xa2, (byte) 0x62, (byte) 0x69, (byte) 0x64, (byte) 0x58, (byte) 0x20, (byte) 0x7c, (byte) 0xe0, (byte) 0xbe, (byte) 0xf2, (byte) 0x27, (byte) 0x8e, (byte) 0x10, (byte) 0xc4, (byte) 0x74, (byte) 0x75, (byte) 0xfd, (byte) 0xde, (byte) 0x1b, (byte) 0x4d, (byte) 0xc7, (byte) 0x20, (byte) 0x4d, (byte) 0xf9, (byte) 0x73, (byte) 0xd5, (byte) 0xa8, (byte) 0xa8, (byte) 0xae, (byte) 0xd1, (byte) 0x4f, (byte) 0x32, (byte) 0x27, (byte) 0x44, (byte) 0x24, (byte) 0xa8, (byte) 0xe5, (byte) 0x42, (byte) 0x64, (byte) 0x74, (byte) 0x79, (byte) 0x70, (byte) 0x65, (byte) 0x6a, (byte) 0x70, (byte) 0x75, (byte) 0x62, (byte) 0x6c, (byte) 0x69, (byte) 0x63, (byte) 0x2d, (byte) 0x6b, (byte) 0x65, (byte) 0x79});
        TEST_MULTIPLE_FRAMES_FRAME_1_FRAGMENTS.add(TEST_MULTIPLE_FRAMES_FRAME_1_RESULT_CONT_FRAG_1);
        TEST_MULTIPLE_FRAMES_FRAME_FRAGMENTS.add(TEST_MULTIPLE_FRAMES_FRAME_1_FRAGMENTS);
        List<Fragment> TEST_MULTIPLE_FRAMES_FRAME_2_FRAGMENTS = new ArrayList<>();
        Fragment TEST_MULTIPLE_FRAMES_FRAME_2_RESULT_INIT_FRAG = new BaseInitializationFragment((byte) 0x83, (byte) 0x36, (byte) 0x6a, new byte[]{(byte) 0x02, (byte) 0xa3, (byte) 0x01, (byte) 0x6b, (byte) 0x77, (byte) 0x65, (byte) 0x62, (byte) 0x61, (byte) 0x75, (byte) 0x74, (byte) 0x68, (byte) 0x6e, (byte) 0x2e, (byte) 0x69, (byte) 0x6f, (byte) 0x02, (byte) 0x58, (byte) 0x20, (byte) 0x28, (byte) 0x7a, (byte) 0x01, (byte) 0x7f, (byte) 0x92, (byte) 0x90, (byte) 0x15, (byte) 0x6f, (byte) 0x65, (byte) 0x61, (byte) 0x8f, (byte) 0x13, (byte) 0x42, (byte) 0xeb, (byte) 0x96, (byte) 0x53, (byte) 0x2e, (byte) 0x57, (byte) 0x6a, (byte) 0x78, (byte) 0x86, (byte) 0x0a, (byte) 0x25, (byte) 0xcc, (byte) 0x3b, (byte) 0x09, (byte) 0xcb, (byte) 0xb0, (byte) 0x95, (byte) 0x93, (byte) 0xf7, (byte) 0xb9, (byte) 0x03, (byte) 0x81, (byte) 0xa2, (byte) 0x62, (byte) 0x69, (byte) 0x64, (byte) 0x58, (byte) 0x20, (byte) 0x7c, (byte) 0xe0, (byte) 0xbe, (byte) 0xf2, (byte) 0x27, (byte) 0x8e, (byte) 0x10, (byte) 0xc4, (byte) 0x74, (byte) 0x75, (byte) 0xfd, (byte) 0xde, (byte) 0x1b, (byte) 0x4d, (byte) 0xc7, (byte) 0x20, (byte) 0x4d, (byte) 0xf9, (byte) 0x73, (byte) 0xd5, (byte) 0xa8, (byte) 0xa8, (byte) 0xae, (byte) 0xd1, (byte) 0x4f, (byte) 0x32, (byte) 0x27, (byte) 0x44, (byte) 0x24, (byte) 0xa8, (byte) 0xe5, (byte) 0x42, (byte) 0x64, (byte) 0x74, (byte) 0x79, (byte) 0x70, (byte) 0x65, (byte) 0x6a, (byte) 0x70, (byte) 0x75, (byte) 0x62, (byte) 0x6c, (byte) 0x69, (byte) 0x63, (byte) 0x2d, (byte) 0x6b, (byte) 0x65, (byte) 0x79});
        TEST_MULTIPLE_FRAMES_FRAME_2_FRAGMENTS.add(TEST_MULTIPLE_FRAMES_FRAME_2_RESULT_INIT_FRAG);
        byte[] TEST_MULTIPLE_FRAMES_FRAME_2_RESULT_CONT_FRAG_DATA = new byte[]{(byte) 0x22, (byte) 0x2a, (byte) 0x25, (byte) 0xa3, (byte) 0x01, (byte) 0x0f, (byte) 0x52, (byte) 0xe2, (byte) 0x1a, (byte) 0x61, (byte) 0x75, (byte) 0x74, (byte) 0x68, (byte) 0x6e, (byte) 0x2e, (byte) 0x69, (byte) 0x6f, (byte) 0x02, (byte) 0x58, (byte) 0x20, (byte) 0x28, (byte) 0x7a, (byte) 0x01, (byte) 0x7f, (byte) 0x92, (byte) 0x90, (byte) 0x15, (byte) 0x6f, (byte) 0x65, (byte) 0x61, (byte) 0x8f, (byte) 0x13, (byte) 0x42, (byte) 0xeb, (byte) 0x96, (byte) 0x53, (byte) 0x2e, (byte) 0x57, (byte) 0x6a, (byte) 0x78, (byte) 0x86, (byte) 0x0a, (byte) 0x25, (byte) 0xcc, (byte) 0x3b, (byte) 0x09, (byte) 0xcb, (byte) 0xb0, (byte) 0x95, (byte) 0x93, (byte) 0xf7, (byte) 0xb9, (byte) 0x03, (byte) 0x81, (byte) 0xa2, (byte) 0x62, (byte) 0x69, (byte) 0x64, (byte) 0x58, (byte) 0x20, (byte) 0x7c, (byte) 0xe0, (byte) 0xbe, (byte) 0xf2, (byte) 0x27, (byte) 0x8e, (byte) 0x10, (byte) 0xc4, (byte) 0x74, (byte) 0x75, (byte) 0xfd, (byte) 0xde, (byte) 0x1b, (byte) 0x4d, (byte) 0xc7, (byte) 0x20, (byte) 0x4d, (byte) 0xf9, (byte) 0x73, (byte) 0xd5, (byte) 0xa8, (byte) 0xa8, (byte) 0xae, (byte) 0xd1, (byte) 0x4f, (byte) 0x32, (byte) 0x27, (byte) 0x44, (byte) 0x24, (byte) 0xa8, (byte) 0xe5, (byte) 0x42, (byte) 0x64, (byte) 0x74, (byte) 0x79, (byte) 0x70, (byte) 0x65, (byte) 0x6a, (byte) 0x70, (byte) 0x75, (byte) 0x62, (byte) 0x6c, (byte) 0x69, (byte) 0x63, (byte) 0x2d, (byte) 0x6b, (byte) 0x65, (byte) 0x79};
        for(int i = 0; i < 0x80; i++)
            TEST_MULTIPLE_FRAMES_FRAME_2_FRAGMENTS.add(new BaseContinuationFragment((byte) i, TEST_MULTIPLE_FRAMES_FRAME_2_RESULT_CONT_FRAG_DATA));
        TEST_MULTIPLE_FRAMES_FRAME_FRAGMENTS.add(TEST_MULTIPLE_FRAMES_FRAME_2_FRAGMENTS);

        Flowable.just(TEST_MULTIPLE_FRAMES_FRAME_0, TEST_MULTIPLE_FRAMES_FRAME_1, TEST_MULTIPLE_FRAMES_FRAME_2).zipWith(Flowable.fromIterable(TEST_MULTIPLE_FRAMES_FRAME_FRAGMENTS), (frame, fragments) -> {
            fragmentationProvider.fragment(Single.just(frame), TEST_MULTIPLE_FRAMES_MAXLEN).test().assertValueSequence(fragments); return new Object(); // zipWith requires some return type
        }).test().assertValueCount(TEST_MULTIPLE_FRAMES_FRAME_FRAGMENTS.size());
    }

    @Test
    public void transformsFrameWithTooSmallMaxLenWithErrors() throws BleException {
        int TEST_TOO_SMALL_MAXLEN_MAXLEN = 2;
        Frame TEST_TOO_SMALL_MAXLEN_FRAME = new BaseFrame((byte) 0x81, (byte) 0x00, (byte) 0x6a, new byte[]{(byte) 0x02, (byte) 0xa3, (byte) 0x01, (byte) 0x6b, (byte) 0x77, (byte) 0x65, (byte) 0x62, (byte) 0x61, (byte) 0x75, (byte) 0x74, (byte) 0x68, (byte) 0x6e, (byte) 0x2e, (byte) 0x69, (byte) 0x6f, (byte) 0x02, (byte) 0x58, (byte) 0x20, (byte) 0x28, (byte) 0x7a, (byte) 0x01, (byte) 0x7f, (byte) 0x92, (byte) 0x90, (byte) 0x15, (byte) 0x6f, (byte) 0x65, (byte) 0x61, (byte) 0x8f, (byte) 0x13, (byte) 0x42, (byte) 0xeb, (byte) 0x96, (byte) 0x53, (byte) 0x2e, (byte) 0x57, (byte) 0x6a, (byte) 0x78, (byte) 0x86, (byte) 0x0a, (byte) 0x25, (byte) 0xcc, (byte) 0x3b, (byte) 0x09, (byte) 0xcb, (byte) 0xb0, (byte) 0x95, (byte) 0x93, (byte) 0xf7, (byte) 0xb9, (byte) 0x03, (byte) 0x81, (byte) 0xa2, (byte) 0x62, (byte) 0x69, (byte) 0x64, (byte) 0x58, (byte) 0x20, (byte) 0x7c, (byte) 0xe0, (byte) 0xbe, (byte) 0xf2, (byte) 0x27, (byte) 0x8e, (byte) 0x10, (byte) 0xc4, (byte) 0x74, (byte) 0x75, (byte) 0xfd, (byte) 0xde, (byte) 0x1b, (byte) 0x4d, (byte) 0xc7, (byte) 0x20, (byte) 0x4d, (byte) 0xf9, (byte) 0x73, (byte) 0xd5, (byte) 0xa8, (byte) 0xa8, (byte) 0xae, (byte) 0xd1, (byte) 0x4f, (byte) 0x32, (byte) 0x27, (byte) 0x44, (byte) 0x24, (byte) 0xa8, (byte) 0xe5, (byte) 0x42, (byte) 0x64, (byte) 0x74, (byte) 0x79, (byte) 0x70, (byte) 0x65, (byte) 0x6a, (byte) 0x70, (byte) 0x75, (byte) 0x62, (byte) 0x6c, (byte) 0x69, (byte) 0x63, (byte) 0x2d, (byte) 0x6b, (byte) 0x65, (byte) 0x79});
        
        fragmentationProvider.fragment(Single.just(TEST_TOO_SMALL_MAXLEN_FRAME), TEST_TOO_SMALL_MAXLEN_MAXLEN).test().assertError(OtherException.class);
    }
}
