package com.blue_unicorn.android_auth_lib.ctap2.transport_specific_bindings.ble.framing.data;

import com.blue_unicorn.android_auth_lib.ctap2.transport_specific_bindings.ble.exceptions.BleException;
import com.blue_unicorn.android_auth_lib.ctap2.transport_specific_bindings.ble.exceptions.InvalidSequenceNumberException;

import org.junit.Test;
import org.junit.Assert;

public class BaseContinuationFragmentTest {

    @Test(expected = InvalidSequenceNumberException.class)
    public void instantiateContinuationFragmentWithInvalidLengthWithErrors() throws BleException {
        new BaseContinuationFragment((byte) 0x81, new byte[]{(byte) 0x02, (byte) 0xa3, (byte) 0x01, (byte) 0x6b, (byte) 0x77, (byte) 0x65, (byte) 0x62, (byte) 0x61, (byte) 0x75, (byte) 0x74, (byte) 0x68, (byte) 0x6e, (byte) 0x2e, (byte) 0x69, (byte) 0x6f, (byte) 0x02, (byte) 0x58, (byte) 0x20, (byte) 0x28, (byte) 0x7a, (byte) 0x01, (byte) 0x7f, (byte) 0x92, (byte) 0x90, (byte) 0x15, (byte) 0x6f, (byte) 0x65, (byte) 0x61, (byte) 0x8f, (byte) 0x13, (byte) 0x42, (byte) 0xeb, (byte) 0x96, (byte) 0x53, (byte) 0x2e, (byte) 0x57, (byte) 0x6a, (byte) 0x78, (byte) 0x86, (byte) 0x0a, (byte) 0x25, (byte) 0xcc, (byte) 0x3b, (byte) 0x09, (byte) 0xcb, (byte) 0xb0, (byte) 0x95, (byte) 0x93, (byte) 0xf7, (byte) 0xb9, (byte) 0x03, (byte) 0x81, (byte) 0xa2, (byte) 0x62, (byte) 0x69, (byte) 0x64, (byte) 0x58, (byte) 0x20, (byte) 0x7c, (byte) 0xe0, (byte) 0xbe, (byte) 0xf2, (byte) 0x27, (byte) 0x8e, (byte) 0x10, (byte) 0xc4, (byte) 0x74, (byte) 0x75, (byte) 0xfd, (byte) 0xde, (byte) 0x1b, (byte) 0x4d, (byte) 0xc7, (byte) 0x20, (byte) 0x4d, (byte) 0xf9, (byte) 0x73, (byte) 0xd5, (byte) 0xa8, (byte) 0xa8, (byte) 0xae, (byte) 0xd1, (byte) 0x4f, (byte) 0x32, (byte) 0x27, (byte) 0x44, (byte) 0x24, (byte) 0xa8, (byte) 0xe5, (byte) 0x42, (byte) 0x64, (byte) 0x74, (byte) 0x79, (byte) 0x70, (byte) 0x65, (byte) 0x6a, (byte) 0x70, (byte) 0x75, (byte) 0x62, (byte) 0x6c, (byte) 0x69, (byte) 0x63, (byte) 0x2d, (byte) 0x6b, (byte) 0x65, (byte) 0x79});
    }

    @Test
    public void instantiateContinuationFragmentWithCorrectResult() throws BleException {
        ContinuationFragment continuationFragment = new BaseContinuationFragment((byte) 0x00, new byte[]{(byte) 0x02, (byte) 0xa3, (byte) 0x01, (byte) 0x6b, (byte) 0x77, (byte) 0x65, (byte) 0x62, (byte) 0x61, (byte) 0x75, (byte) 0x74, (byte) 0x68, (byte) 0x6e, (byte) 0x2e, (byte) 0x69, (byte) 0x6f, (byte) 0x02, (byte) 0x58, (byte) 0x20, (byte) 0x28, (byte) 0x7a, (byte) 0x01, (byte) 0x7f, (byte) 0x92, (byte) 0x90, (byte) 0x15, (byte) 0x6f, (byte) 0x65, (byte) 0x61, (byte) 0x8f, (byte) 0x13, (byte) 0x42, (byte) 0xeb, (byte) 0x96, (byte) 0x53, (byte) 0x2e, (byte) 0x57, (byte) 0x6a, (byte) 0x78, (byte) 0x86, (byte) 0x0a, (byte) 0x25, (byte) 0xcc, (byte) 0x3b, (byte) 0x09, (byte) 0xcb, (byte) 0xb0, (byte) 0x95, (byte) 0x93, (byte) 0xf7, (byte) 0xb9, (byte) 0x03, (byte) 0x81, (byte) 0xa2, (byte) 0x62, (byte) 0x69, (byte) 0x64, (byte) 0x58, (byte) 0x20, (byte) 0x7c, (byte) 0xe0, (byte) 0xbe, (byte) 0xf2, (byte) 0x27, (byte) 0x8e, (byte) 0x10, (byte) 0xc4, (byte) 0x74, (byte) 0x75, (byte) 0xfd, (byte) 0xde, (byte) 0x1b, (byte) 0x4d, (byte) 0xc7, (byte) 0x20, (byte) 0x4d, (byte) 0xf9, (byte) 0x73, (byte) 0xd5, (byte) 0xa8, (byte) 0xa8, (byte) 0xae, (byte) 0xd1, (byte) 0x4f, (byte) 0x32, (byte) 0x27, (byte) 0x44, (byte) 0x24, (byte) 0xa8, (byte) 0xe5, (byte) 0x42, (byte) 0x64, (byte) 0x74, (byte) 0x79, (byte) 0x70, (byte) 0x65, (byte) 0x6a, (byte) 0x70, (byte) 0x75, (byte) 0x62, (byte) 0x6c, (byte) 0x69, (byte) 0x63, (byte) 0x2d, (byte) 0x6b, (byte) 0x65, (byte) 0x79});
        Assert.assertEquals(continuationFragment.getSEQ(), (byte) 0x00);
        Assert.assertArrayEquals(continuationFragment.getDATA(), new byte[]{(byte) 0x02, (byte) 0xa3, (byte) 0x01, (byte) 0x6b, (byte) 0x77, (byte) 0x65, (byte) 0x62, (byte) 0x61, (byte) 0x75, (byte) 0x74, (byte) 0x68, (byte) 0x6e, (byte) 0x2e, (byte) 0x69, (byte) 0x6f, (byte) 0x02, (byte) 0x58, (byte) 0x20, (byte) 0x28, (byte) 0x7a, (byte) 0x01, (byte) 0x7f, (byte) 0x92, (byte) 0x90, (byte) 0x15, (byte) 0x6f, (byte) 0x65, (byte) 0x61, (byte) 0x8f, (byte) 0x13, (byte) 0x42, (byte) 0xeb, (byte) 0x96, (byte) 0x53, (byte) 0x2e, (byte) 0x57, (byte) 0x6a, (byte) 0x78, (byte) 0x86, (byte) 0x0a, (byte) 0x25, (byte) 0xcc, (byte) 0x3b, (byte) 0x09, (byte) 0xcb, (byte) 0xb0, (byte) 0x95, (byte) 0x93, (byte) 0xf7, (byte) 0xb9, (byte) 0x03, (byte) 0x81, (byte) 0xa2, (byte) 0x62, (byte) 0x69, (byte) 0x64, (byte) 0x58, (byte) 0x20, (byte) 0x7c, (byte) 0xe0, (byte) 0xbe, (byte) 0xf2, (byte) 0x27, (byte) 0x8e, (byte) 0x10, (byte) 0xc4, (byte) 0x74, (byte) 0x75, (byte) 0xfd, (byte) 0xde, (byte) 0x1b, (byte) 0x4d, (byte) 0xc7, (byte) 0x20, (byte) 0x4d, (byte) 0xf9, (byte) 0x73, (byte) 0xd5, (byte) 0xa8, (byte) 0xa8, (byte) 0xae, (byte) 0xd1, (byte) 0x4f, (byte) 0x32, (byte) 0x27, (byte) 0x44, (byte) 0x24, (byte) 0xa8, (byte) 0xe5, (byte) 0x42, (byte) 0x64, (byte) 0x74, (byte) 0x79, (byte) 0x70, (byte) 0x65, (byte) 0x6a, (byte) 0x70, (byte) 0x75, (byte) 0x62, (byte) 0x6c, (byte) 0x69, (byte) 0x63, (byte) 0x2d, (byte) 0x6b, (byte) 0x65, (byte) 0x79});
    }
}
